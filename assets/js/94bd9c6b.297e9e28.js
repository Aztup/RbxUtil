"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2827],{33267:e=>{e.exports=JSON.parse('{"functions":[{"name":"ReadInt8","desc":"Read a signed 8-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":51,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadUInt8","desc":"Read an unsigned 8-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":61,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadInt16","desc":"Read a signed 16-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":71,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadUInt16","desc":"Read an unsigned 16-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":81,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadInt32","desc":"Read a signed 32-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":91,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadUInt32","desc":"Read an unsigned 32-bit integer from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":101,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadFloat32","desc":"Read a 32-bit single-precision float from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":111,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadFloat64","desc":"Read a 64-bit double-precision float from the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":121,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadString","desc":"Read a string from the buffer.\\n\\n:::info\\nThis assumes the string was written using the `BufferWriter:WriteString()`\\nmethod, which stores an extra integer to mark the size of the string.","params":[],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"method","source":{"line":135,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ReadStringRaw","desc":"Read a string from the buffer.\\n\\n:::info\\nThis assumes the string was written using the `BufferWriter:WriteStringRaw()`.","params":[{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"method","source":{"line":149,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"SetCursor","desc":"Sets the position of the cursor.","params":[{"name":"position","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":170,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"GetCursor","desc":"Returns the position of the cursor.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":182,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"ResetCursor","desc":"Resets the position of the cursor.","params":[],"returns":[],"function_type":"method","source":{"line":189,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"GetSize","desc":"Returns the size of the buffer.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":196,"path":"modules/buffer-util/BufferReader.lua"}},{"name":"GetBuffer","desc":"Returns the `buffer` object.","params":[],"returns":[{"desc":"","lua_type":"buffer\\n"}],"function_type":"method","source":{"line":203,"path":"modules/buffer-util/BufferReader.lua"}}],"properties":[],"types":[],"name":"BufferReader","desc":"A BufferReader is an abstraction wrapper for `buffer` objects\\nthat provides a convenient way of reading out data from buffers.","source":{"line":13,"path":"modules/buffer-util/BufferReader.lua"}}')}}]);