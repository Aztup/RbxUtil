"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9908],{50681:t=>{t.exports=JSON.parse('{"functions":[{"name":"new","desc":"Create a Silo.\\n\\n```lua\\nlocal statsSilo = Silo.new({\\n\\t-- Initial state:\\n\\tKills = 0,\\n\\tDeaths = 0,\\n\\tPoints = 0,\\n}, {\\n\\t-- Modifiers are functions that modify the state:\\n\\tSetKills = function(state, kills)\\n\\t\\tstate.Kills = kills\\n\\tend,\\n\\tAddPoints = function(state, points)\\n\\t\\tstate.Points += points\\n\\tend,\\n})\\n\\n-- Use Actions to modify the state:\\nstatsSilo:Dispatch(statsSilo.Actions.SetKills(10))\\n\\n-- Use GetState to get the current state:\\nprint(\\"Kills\\", statsSilo:GetState().Kills)\\n```\\n\\nFrom the above example, note how the modifier functions were transformed\\ninto functions that can be called from `Actions` with just the single\\npayload (no need to pass state). The `SetKills` modifier is then used\\nas the `SetKills` action to be dispatched.","params":[{"name":"defaultState","desc":"","lua_type":"State<S>"},{"name":"modifiers","desc":"","lua_type":"{ Modifier<S> }?"}],"returns":[{"desc":"","lua_type":"Silo"}],"function_type":"static","source":{"line":78,"path":"modules/silo/init.lua"}},{"name":"combine","desc":"Constructs a new silo as a combination of other silos.","params":[{"name":"silos","desc":"","lua_type":"{Silo}"},{"name":"initialState","desc":"","lua_type":"State<S>?"}],"returns":[{"desc":"","lua_type":"Silo"}],"function_type":"static","source":{"line":116,"path":"modules/silo/init.lua"}},{"name":"GetState","desc":"Get the current state.\\n\\n```lua\\nlocal state = silo:GetState()\\n```","params":[],"returns":[{"desc":"","lua_type":"State<S>\\n"}],"function_type":"method","source":{"line":163,"path":"modules/silo/init.lua"}},{"name":"Dispatch","desc":"Dispatch an action.\\n\\n```lua\\nsilo:Dispatch(silo.Actions.DoSomething(\\"something\\"))\\n```","params":[{"name":"action","desc":"","lua_type":"Action<A>"}],"returns":[],"function_type":"method","source":{"line":177,"path":"modules/silo/init.lua"}},{"name":"Subscribe","desc":"Subscribe a function to receive all state updates, including\\ninitial state (subscriber is called immediately).\\n\\nReturns an unsubscribe function. Call the function to unsubscribe.\\n\\n```lua\\nlocal unsubscribe = silo:Subscribe(function(newState, oldState)\\n\\t-- Do something\\nend)\\n\\n-- Later on, if desired, disconnect the subscription by calling unsubscribe:\\nunsubscribe()\\n```","params":[{"name":"subscriber","desc":"","lua_type":"(newState: State<S>, oldState: State<S>) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"method","source":{"line":221,"path":"modules/silo/init.lua"}},{"name":"Watch","desc":"Watch a specific value within the state, which is selected by the\\n`selector` function. The initial value, and any subsequent changes\\ngrabbed by the selector, will be passed to the `onChange` function.\\n\\nJust like `Subscribe`, a function is returned that can be used\\nto unsubscribe (i.e. stop watching).\\n\\n```lua\\nlocal function SelectPoints(state)\\n\\treturn state.Statistics.Points\\nend\\n\\nlocal unsubscribe = silo:Watch(SelectPoints, function(points)\\n\\tprint(\\"Points\\", points)\\nend)\\n```","params":[{"name":"selector","desc":"","lua_type":"(State<S>) -> T"},{"name":"onChange","desc":"","lua_type":"(T) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"method","source":{"line":262,"path":"modules/silo/init.lua"}},{"name":"ResetToDefaultState","desc":"Reset the state to the default state that was given in the constructor.\\n\\n```lua\\nlocal silo = Silo.new({\\n\\tPoints = 0,\\n}, {\\n\\tSetPoints = function(state, points)\\n\\t\\tstate.Points = points\\n\\tend\\n})\\n\\nsilo:Dispatch(silo.Actions.SetPoints(10))\\n\\nprint(silo:GetState().Points) -- 10\\n\\nsilo:ResetToDefaultState()\\n\\nprint(silo:GetState().Points) -- 0\\n```","params":[],"returns":[],"function_type":"method","source":{"line":301,"path":"modules/silo/init.lua"}}],"properties":[],"types":[{"name":"State<S>","desc":"Represents state.","lua_type":"{[string]: any}","source":{"line":12,"path":"modules/silo/init.lua"}},{"name":"Modifier<S>","desc":"A function that modifies state.","lua_type":"(State<S>, any) -> ()","source":{"line":19,"path":"modules/silo/init.lua"}},{"name":"Action<A>","desc":"Actions are passed to `Dispatch`. However, typically actions are\\nnever constructed by hand. Use a silo\'s Actions table to generate\\nthese actions.","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"Payload","lua_type":"A","desc":""}],"source":{"line":30,"path":"modules/silo/init.lua"}}],"name":"Silo","desc":"A Silo is a state container, inspired by Redux slices and\\ndesigned for Roblox developers.","source":{"line":43,"path":"modules/silo/init.lua"}}')}}]);