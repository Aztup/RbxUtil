"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3719],{42740:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a Quaternion.\\n\\n:::caution\\nThe `new` constructor assumes the given arguments represent a proper Quaternion. This\\nconstructor should only be used if you really know what you\'re doing.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"z","desc":"","lua_type":"number"},{"name":"w","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"static","source":{"line":43,"path":"modules/quaternion/init.lua"}},{"name":"euler","desc":"Constructs a Quaternion from Euler angles.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"z","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"static","source":{"line":59,"path":"modules/quaternion/init.lua"}},{"name":"axisAngle","desc":"Constructs a Quaternion representing a rotation of `angle` radians around `axis`.","params":[{"name":"axis","desc":"","lua_type":"Vector3"},{"name":"angle","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"static","source":{"line":78,"path":"modules/quaternion/init.lua"}},{"name":"lookRotation","desc":"Constructs a Quaternion representing a rotation facing `forward` direction, where\\n`upwards` represents the upwards direction (this defaults to `Vector3.yAxis`).","params":[{"name":"forward","desc":"","lua_type":"Vector3"},{"name":"upwards","desc":"","lua_type":"Vector3?"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"static","source":{"line":89,"path":"modules/quaternion/init.lua"}},{"name":"Dot","desc":"Calculates the dot product between the two Quaternions.","params":[{"name":"other","desc":"","lua_type":"Quaternion"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":138,"path":"modules/quaternion/init.lua"}},{"name":"Slerp","desc":"Calculates a spherical interpolation between the two Quaternions. Parameter `t` represents\\nthe percentage between the two rotations, from a range of `[0, 1]`.","params":[{"name":"b","desc":"","lua_type":"Quaternion"},{"name":"t","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"method","source":{"line":146,"path":"modules/quaternion/init.lua"}},{"name":"Angle","desc":"Calculates the angle between the two Quaternions.","params":[{"name":"other","desc":"","lua_type":"Quaternion"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":180,"path":"modules/quaternion/init.lua"}},{"name":"RotateTowards","desc":"Constructs a new Quaternion that rotates from this Quaternion to the `other` quaternion, with a maximum\\nrotation of `maxRadiansDelta`.","params":[{"name":"other","desc":"","lua_type":"Quaternion"},{"name":"maxRadiansDelta","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"method","source":{"line":191,"path":"modules/quaternion/init.lua"}},{"name":"ToCFrame","desc":"Constructs a CFrame value representing the Quaternion. An optional `position` Vector can be given to\\nrepresent the position of the CFrame in 3D space. This defaults to `Vector3.zero`.","params":[{"name":"position","desc":"","lua_type":"Vector3?"}],"returns":[{"desc":"","lua_type":"CFrame\\n"}],"function_type":"method","source":{"line":207,"path":"modules/quaternion/init.lua"}},{"name":"ToEulerAngles","desc":"Calculates the euler angles that represent the Quaternion.","params":[],"returns":[{"desc":"","lua_type":"Vector3\\n"}],"function_type":"method","source":{"line":216,"path":"modules/quaternion/init.lua"}},{"name":"ToAxisAngle","desc":"Calculates the axis and angle representing the Quaternion.","params":[],"returns":[{"desc":"","lua_type":"Vector3"},{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":235,"path":"modules/quaternion/init.lua"}},{"name":"Inverse","desc":"Returns the inverse of the Quaternion. (Identical to Conjugate.)","params":[],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"method","source":{"line":253,"path":"modules/quaternion/init.lua"}},{"name":"Conjugate","desc":"Returns the conjugate of the Quaternion. (Identical to Inverse.)","params":[],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"method","source":{"line":260,"path":"modules/quaternion/init.lua"}},{"name":"Normalize","desc":"Returns the normalized representation of the Quaternion.","params":[],"returns":[{"desc":"","lua_type":"Quaternion\\n"}],"function_type":"method","source":{"line":267,"path":"modules/quaternion/init.lua"}},{"name":"Magnitude","desc":"Calculates the magnitude of the Quaternion.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":280,"path":"modules/quaternion/init.lua"}},{"name":"SqrMagnitude","desc":"Calculates the square magnitude of the Quaternion.","params":[],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":287,"path":"modules/quaternion/init.lua"}}],"properties":[{"name":"identity","desc":"Identity Quaternion.","lua_type":"Quaternion","source":{"line":339,"path":"modules/quaternion/init.lua"}}],"types":[],"name":"Quaternion","desc":"Represents a Quaternion. Quaternions are 4D structs that represent rotations\\nin 3D space. Quaternions are often used in 3D graphics to avoid the ambiguity\\nthat comes with Euler angles (e.g. gimbal lock).\\n\\nRoblox represents the transformation of an object via CFrame values, which are\\nmatrices that hold position and rotation in 3D space. Quaternions can be converted\\nto CFrame values through the `ToCFrame` method.","source":{"line":33,"path":"modules/quaternion/init.lua"}}')}}]);